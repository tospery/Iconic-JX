// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

import Foundation
import UIKit

protocol StoryboardSceneType {
  static var storyboardName: String { get }
}

extension StoryboardSceneType {
  static func storyboard() -> UIStoryboard {
    return UIStoryboard(name: self.storyboardName, bundle: nil)
  }

  static func initialViewController() -> UIViewController {
    return storyboard().instantiateInitialViewController()!
  }
}

extension StoryboardSceneType where Self: RawRepresentable, Self.RawValue == String {
  func viewController() -> UIViewController {
    return Self.storyboard().instantiateViewControllerWithIdentifier(self.rawValue)
  }
  static func viewController(identifier: Self) -> UIViewController {
    return identifier.viewController()
  }
}

protocol StoryboardSegueType: RawRepresentable { }

extension UIViewController {
  func performSegue<S: StoryboardSegueType where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier(segue.rawValue, sender: sender)
  }
}

struct XCTStoryboardsScene {
  enum Anonymous: StoryboardSceneType {
    static let storyboardName = "Anonymous"
  }
  enum Dependency: String, StoryboardSceneType {
    static let storyboardName = "Dependency"

    case DependentScene = "Dependent"
    static func instantiateDependent() -> UIViewController {
      return XCTStoryboardsScene.Dependency.DependentScene.viewController()
    }
  }
  enum Message: String, StoryboardSceneType {
    static let storyboardName = "Message"

    case ComposerScene = "Composer"
    static func instantiateComposer() -> UIViewController {
      return XCTStoryboardsScene.Message.ComposerScene.viewController()
    }

    case MessagesListScene = "MessagesList"
    static func instantiateMessagesList() -> UITableViewController {
      return XCTStoryboardsScene.Message.MessagesListScene.viewController() as! UITableViewController
    }

    case NavCtrlScene = "NavCtrl"
    static func instantiateNavCtrl() -> UINavigationController {
      return XCTStoryboardsScene.Message.NavCtrlScene.viewController() as! UINavigationController
    }

    case URLChooserScene = "URLChooser"
    static func instantiateURLChooser() -> XXPickerViewController {
      return XCTStoryboardsScene.Message.URLChooserScene.viewController() as! XXPickerViewController
    }
  }
  enum Placeholder: String, StoryboardSceneType {
    static let storyboardName = "Placeholder"

    case NavigationScene = "Navigation"
    static func instantiateNavigation() -> UINavigationController {
      return XCTStoryboardsScene.Placeholder.NavigationScene.viewController() as! UINavigationController
    }
  }
  enum Wizard: String, StoryboardSceneType {
    static let storyboardName = "Wizard"

    case Accept_CGUScene = "Accept-CGU"
    static func instantiateAcceptCGU() -> UIViewController {
      return XCTStoryboardsScene.Wizard.Accept_CGUScene.viewController()
    }

    case CreateAccountScene = "CreateAccount"
    static func instantiateCreateAccount() -> CreateAccViewController {
      return XCTStoryboardsScene.Wizard.CreateAccountScene.viewController() as! CreateAccViewController
    }

    case PreferencesScene = "Preferences"
    static func instantiatePreferences() -> UITableViewController {
      return XCTStoryboardsScene.Wizard.PreferencesScene.viewController() as! UITableViewController
    }

    case Validate_PasswordScene = "Validate_Password"
    static func instantiateValidatePassword() -> UIViewController {
      return XCTStoryboardsScene.Wizard.Validate_PasswordScene.viewController()
    }
  }
}

struct XCTStoryboardsSegue {
  enum Message: String, StoryboardSegueType {
    case CustomBack = "CustomBack"
    case Embed = "Embed"
    case NonCustom = "NonCustom"
    case Show_NavCtrl = "Show-NavCtrl"
  }
  enum Wizard: String, StoryboardSegueType {
    case ShowPassword = "ShowPassword"
  }
}
